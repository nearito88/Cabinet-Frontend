import { Component, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, NgForm } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';

// Material Angular Imports
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSnackBar } from '@angular/material/snack-bar';

// Assuming you have these models and services
import { Receptionist } from '../../../models/receptionist'; // Adjust path as needed
import { ReceptionistService } from '../../../services/receptionist/receptionist.service'; // Adjust path as needed

@Component({
  selector: 'app-receptionist-form',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    RouterModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatButtonModule,
    MatIconModule,
    MatProgressSpinnerModule
  ],
  templateUrl: './receptionist-form.component.html',
  styleUrls: ['./receptionist-form.component.css']
})
export class ReceptionistFormComponent implements OnInit {
  receptionist: Receptionist = {
    receptionistId: undefined, // Will be generated by backend for new, or existing for edit
    name: '',
    age: null, // Use null for number inputs that can be empty
    gender: '',
    phone: '',
    email: '',
    dateJoined: null // Use null for date inputs
  };
  isSaving = false;
  isEditMode = false;
  errorMessage: string = '';

  private receptionistService = inject(ReceptionistService);
  private router = inject(Router);
  private route = inject(ActivatedRoute);
  private snackBar = inject(MatSnackBar);

  constructor() { }

  ngOnInit(): void {
    // Check if we are in edit mode
    this.route.paramMap.subscribe(params => {
      const id = params.get('id');
      if (id) {
        this.isEditMode = true;
        this.loadReceptionist(id);
      }
    });
  }

  loadReceptionist(id: string): void {
    this.isSaving = true;
    this.errorMessage = '';
    this.receptionistService.getreceptionistById(id).subscribe({
      next: (data: Receptionist) => {
        this.receptionist = data;
        this.isSaving = false;
      },
      error: (error: any) => {
        console.error('Error loading receptionist:', error);
        this.errorMessage = 'Failed to load receptionist. Please try again.';
        this.isSaving = false;
        this.snackBar.open(this.errorMessage, 'Close', { duration: 5000 });
      }
    });
  }

  saveReceptionist(form: NgForm): void {
    if (form.invalid) {
      // Mark all fields as touched to display validation errors
      Object.values(form.controls).forEach(control => control.markAsTouched());
      this.snackBar.open('Please correct the form errors.', 'Close', { duration: 3000 });
      return;
    }

    this.isSaving = true;
    this.errorMessage = '';

    if (this.isEditMode) {
      this.receptionistService.updatereceptionist(this.receptionist.receptionistId!, this.receptionist).subscribe({
        next: (response: string) => {
          this.snackBar.open(response, 'Close', { duration: 3000 });
          this.isSaving = false;
          this.router.navigate(['/receptionists']); // Navigate back to list
        },
        error: (error: any) => {
          console.error('Error updating receptionist:', error);
          this.errorMessage = 'Failed to update receptionist: ' + (error.error?.message || error.message);
          this.isSaving = false;
          this.snackBar.open(this.errorMessage, 'Close', { duration: 5000 });
        }
      });
    } else {
      this.receptionistService.addreceptionist(this.receptionist).subscribe({
        next: (response: string) => {
          this.snackBar.open(response, 'Close', { duration: 3000 });
          this.isSaving = false;
          this.router.navigate(['/receptionists']); // Navigate back to list
        },
        error: (error: any) => {
          console.error('Error adding receptionist:', error);
          this.errorMessage = 'Failed to add receptionist: ' + (error.error?.message || error.message);
          this.isSaving = false;
          this.snackBar.open(this.errorMessage, 'Close', { duration: 5000 });
        }
      });
    }
  }

  cancel(): void {
    this.router.navigate(['/receptionists']); // Navigate back to the list
  }
}