// src/app/product-add/product-add.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router } from '@angular/router'; // To navigate after adding
import { Product } from '../../../models/product';
import { ProductService } from '../../../services/inventory/product.service';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatError } from '@angular/material/form-field';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
@Component({
  selector: 'app-product-add',
  standalone:true,
  imports:[ReactiveFormsModule,CommonModule,MatCardModule,MatFormFieldModule,MatInputModule,MatButtonModule,MatIconModule,MatError,MatTooltipModule,MatProgressSpinnerModule],
  templateUrl: './product-form.component.html',
  styleUrls: ['./product-form.component.css']
})
export class ProductAddComponent implements OnInit {
  productForm!: FormGroup; // The Reactive Form group
  isLoading: boolean = false;
  errorMessage: string | null = null;

  constructor(
    private fb: FormBuilder, // FormBuilder for creating the FormGroup
    private router: Router, // For navigation
    private productService: ProductService // For making API calls to add a product
  ) {}

  ngOnInit(): void {
    // Initialize the form with empty values or default values for a new product
    this.initForm();
  }

  /**
   * Initializes the Reactive Form for adding a new product.
   * Fields are set up with initial empty values and validators.
   * Note: productId is usually generated by the backend, so it's not part of the form.
   * dateUpdated is also typically set by the backend upon creation.
   */
  initForm(): void {
    this.productForm = this.fb.group({
      name: ['', Validators.required],
      price: [null, [Validators.required, Validators.min(0)]],
      quantity: [null, [Validators.required, Validators.min(0)]],
      minimum: [null, [Validators.required, Validators.min(0)]]
      // No dateUpdated field in the form as it's set by the backend
    });
  }

  /**
   * Handles the form submission to create a new product.
   */
  createProduct(): void {
    // Check if the form is valid before attempting to create
    if (this.productForm.invalid) {
      this.productForm.markAllAsTouched(); // Mark all controls as touched to show validation errors
      this.errorMessage = 'Please correct the form errors before adding the product.';
      return;
    }

    this.isLoading = true; // Set loading state
    this.errorMessage = null; // Clear previous errors

    // Create a new Product object from the form's value
    // The backend will generate productId and set dateUpdated
    const newProduct: Product = {
      // Assuming productId is generated by backend for new products
      // You might omit productId or set it to a placeholder like '' or null
      productId: '', // Placeholder, will be ignored by addProduct backend
      productName: this.productForm.value.name,
      price: this.productForm.value.price,
      quantity: this.productForm.value.quantity,
      minimum: this.productForm.value.minimum,
      dateUpdated: new Date() // Sending current date, though backend might override
    };

    // Call the addProduct method from your ProductService
    this.productService.addProduct(newProduct).subscribe({
      next: (response) => {
        // Assuming addProduct returns a success message or the created product
        console.log('Product added successfully:', response);
        this.router.navigate(['/inventory']); // Navigate back to the product list
      },
      error: (err) => {
        console.error('Error adding product:', err);
        this.errorMessage = 'Failed to add product. Please try again.';
        this.isLoading = false; // Stop loading on error
      }
    });
  }

  /**
   * Navigates back to the product list without adding a product.
   */
  cancel(): void {
    this.router.navigate(['/inventory']);
  }
}